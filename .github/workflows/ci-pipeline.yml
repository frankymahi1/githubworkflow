name: Complex CI/CD Demo

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:

  prepare:
    name: üõ†Ô∏è Preparation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "Setting up environment variables for ${{ github.event.inputs.environment }}"

  build:
    name: üèóÔ∏è Build Matrix
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        java: [11, 17]
    steps:
      - name: Print Build Info
        run: |
          echo "Building on OS=${{ matrix.os }} with Java=${{ matrix.java }}"
          sleep 5  # Simulate build time

  test:
    name: üß™ Test & Coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run Unit Tests
        run: |
          echo "Running unit tests..."
          sleep 3

      - name: Run Integration Tests
        if: ${{ github.event.inputs.environment == 'staging' }}
        run: |
          echo "Running integration tests (only on staging)..."
          sleep 3

  security:
    name: üîê Security Checks
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Run Static Code Analysis
        run: |
          echo "Analyzing code..."
          sleep 2

      - name: Run Vulnerability Scan
        run: |
          echo "Scanning dependencies..."
          sleep 2

  deploy:
    name: üöÄ Deploy to ${{ github.event.inputs.environment }}
    needs: [security]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Deploy
        run: |
          echo "Deploying to ${{ github.event.inputs.environment }}..."
          sleep 4

      - name: Notify Slack
        run: |
          echo "Notify Slack (simulated)"


# # .github/workflows/python-app.yml
#
# name: Python application
#
# on:
#    push:
#      branches: [ main, github_test_branch ]
#    pull_request:
#      branches: [ main, github_test_branch ]
#    workflow_dispatch:  # Allows manual triggering of the workflow
#
# jobs:
#   build:
#
#     runs-on: ubuntu-latest
#
#     steps:
#     - uses: actions/checkout@v2
#
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'
#
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#
#     - name: Run tests
#       run: |
#         pytest
#
#   run_test_cases:
#     ##if: github.event_name == 'workflow_dispatch'  # Only run if manually triggered
#     runs-on: ubuntu-latest
#     needs: build  # This line makes run_test_cases dependent on build
#     strategy:
#       matrix:
#         job: [ virtual_dataset_registration, physical_dataset_registration, task_flow_execution, schema_registation, databricks_notebook ]
#
#
#     steps:
#     - uses: actions/checkout@v2
#
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'
#
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#
#     - name: Print GitHub Event Name
#       run: |
#        echo "GitHub Event Name: ${{ github.event_name }}"
#     - name: Execute specific script
#        echo "Running script for ${{ matrix.job }}"
#       run: |
#          if [ "${{ matrix.job }}" == "virtual_dataset_registration" ]; then
#            python test/data_registration.py
#          elif [ "${{ matrix.job }}" == "physical_dataset_registration" ]; then
#            python test/data_registration.py
#          elif [ "${{ matrix.job }}" == "task_flow_execution" ]; then
#            python test/data_registration.py
#          elif [ "${{ matrix.job }}" == "schema_registration" ]; then
#            python test/data_registration.py
#          elif [ "${{ matrix.job }}" == "databricks_notebook" ]; then
#            python test/data_registration.py
#          fi
#
##     - name: Step 1 - Execute data Registration
##       run: python test/data_registration.py
##
##     - name: Step 2 - Execute schema Registration
##       run: python test/schema_registration.py
##     - name: Step 3 - Test calculator functionality
##       env:
##         PYTHONPATH: ./src
##       run: python test/test_calculator.py
#   Reporting:
#     runs-on: ubuntu-latest
#     needs: run_test_cases
#     steps:
#     - uses: actions/checkout@v2
#
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'
#   dataset_registation:
#     runs-on: ubuntu-latest
#     needs: run_test_cases
#     steps:
#     - uses: actions/checkout@v2
#
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'
#   schema_registation:
#     runs-on: ubuntu-latest
#     needs: run_test_cases
#     steps:
#       - uses: actions/checkout@v2
#
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'